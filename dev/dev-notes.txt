====== Development notes ======

O WYSIWYG as an alternative to markup???
  notes:
    2 options: Save in html or txt2tags format
    HTML Editing: Webkit
    HTML Saving: Webkit
    HTML2txt2tags: Vim Script (port to python)
    HTML2markdown: python module exists
    HTML2Latex: Use HTML2txt2tags2Latex (write or use twisted lore)
    HTML2PDF: xhtml2pdf, http://code.activestate.com/recipes/532908/ possible, but only for plain text (no formatting)
              webkit is a better option here
    HTML2ODF: no suitable library at the moment. PyODF is buggy

    http://arstechnica.com/open-source/guides/2009/07/how-to-build-a-desktop-wysiwyg-editor-with-webkit-and-html-5.ars

    roadmap suggestion:
    wait for pywebkitgtk to stabilize a bit more (new ubuntu version)
    first add webkit as possible preview backend
    save all content directly in html to have way more editing options

O Encryption/Password
  - Save in password protected zipfiles (no open source tool to generate those)
    seems to be very easy to hack
  - Symmetric Encryption. AES (best method it seems)
        with PyCrypto
          http://www.dlitz.net/software/pycrypto/,
          http://www.codekoala.com/blog/2009/aes-encryption-python-using-pycrypto/
          http://idsvandermolen.com/codefiles/crypto.py
          available in repos of all major distros
          ezpycrypto unneeded. mostly only simplifies key generation, ...
        Pure python AES module (check speed)
  - Truecrypt (Commandline): Would probably work, but requires installation of
    additional package that is not available in the repos

  --> Use pycrypto only

  - What should be encrypted? Files, Strings? -> Files better
    Lifeograph only writes to one file, encrypts a string

  - Maybe use only one file for a journal, add journal dependent variables
  - Maybe compress this file

  - AES uses fixed key-length -> bad for passwords -> use Blowfish with variable length
  - Blowfish faster than AES

  - Maybe just use 7z (only archive format that is widely known with good encryption (AES-256))
  - 7z can however also produce zip files with good encryption
  - For 7z package p7zip is needed (only supports 7z)
  - binary is called 7zr
  - Handling of extracted text files only in memory should be possible
    - What about pictures?

  - Maybe find a way to encrypt the whole directory

  - Best option seems to be 7z. Encrypt the texts and files in a lzma file and
    password protect it if needed. Use the command line instead of a library.


X Automatic insertions
  - Use code from Zeitgeist


X Spell-Checking
  - Enchant depends on aspell and hunspell on ubuntu
  - gtkspell depends on enchant
  - Use either aspell directly or through enchant
  - enchant is more up-to-date, but harder to use with gtk
  - gtkspell seems to be the easiest solution (python-gnome2-extras)

X Portable Version:
  Linux users can use the setting too, if all the computers have the RedNotebook
  requirements installed (pygtk, pyyaml)

  - Provide Option in Setup for running RedNotebook portable. Maybe use file
    that is only installed, when running this mode.

O Formulas:
  - MathJax CDN works well for websites
  - CDN needs internet connection
  - HTML needs to be written to a file before it can be loaded if it contains remote js
  - PDF export needs some hacking to only print after js has finished
  - Latex export for multiline formulas is difficult (impossible?)
  - Installing MathJax locally might not be an option, because it needs a lot of ressources

O Format:
  - JSON is faster to decode and encode and we only use strings, ints and dicts
    anyway.

    The results for de-/encoding a typical example are:
    * json_print      1.09020709991
    * pickle_print    0.710677146912
    * yaml_print      4.67402696609 -> we already get 2x fast
    * cyaml_print     1.96824002266 -> json 2x as fast
    * json_read       0.253901958466
    * pickle_read     0.15873003006
    * yaml_read       1.24900007248 -> json 5x as fast

    However, the format is more verbose and requires more syntax.


Ideas:

Have a viewable panel with a sort of tree-like structure,
that shows every single entry I've ever added, somewhat similar to how windows
folders are organised, but with a top level directory for each year, a sublevel
with months, and an entry level.. with a plus/minus option to display, or not,
each year/month and maybe a count next to each year/month, so we can quickly
and easily see how many entries were made each year/month. This would be a
great addition to the calendar method already available.

Implementation notes:
- PyYAML saves each string as ascii if it only contains ascii chars.
  If there are unicode chars, a unicode object is saved.
- The Days always turn their text into unicode before returning it.
